
=========================
PORUS: Portable USB Stack version 0.1.0
=========================

PORUS is a portable USB device stack. It is designed to contain, as far as
possible, all of the code common to a complete USB device implementation.

PORUS is neither stable nor finished.  Until version 1.0.0, the API may 
change, perhaps significantly.

At this time, only one port is available. It has been tested on the 
MMB0 DSP board, which uses the Texas Instruments TMS320VC5507 DSP. More 
ports are planned.

Installation
------------

PORUS consists of source files and a program called usbgen.  There is no 
installation procedure for the source files; these are meant to be copied 
directly to each project.

To install usbgen, you need Python and a shell environment; on Windows,
cygwin is highly recommended (www.cygwin.com).  Installation is as follows:

1. Change to the usbgen directory

2. Run 'python setup.py install' (on Linux, you need to be root)

Files
-----

The distribution contains the following:

doc/ - Documentation
port/ - Ports, with one directory per port
src/ - Source code and header files
test/ - A tester
usbgen/ - Code generator for static structures and enumeration code
NEWS - Version news
CHANGELOG - Detailed change log
README - This file
VERSION - Version number

Documentation
-------------

At present, PORUS has little documentation.  The API is partly documented 
in Doxygen-formatted comments in the header files.

Contributions to the documentation (or any other part of PORUS) are welcomed
and solicited.

Basic setup for a project
-------------------------

PORUS is distributed as source files, some of which are generated by usbgen.

To use PORUS, you need the following:

- On Windows, Cygwin is highly recommended. See www.cygwin.com. Cygwin
provides a Unix-like shell environment. From this you can easily run usbgen.

- Python, to run usbgen. This is available for free for nearly all modern
operating systems from www.python.org, and is also available as a Cygwin
package.

To set up PORUS in your project:

1. Write a configuration file for usbgen. Use the example configuration 
   file usbgen/example.usbconfig as a starting point. It contains detailed 
   comments.

2. In your project's directory, run usbgen on the configuration file you
   made. This will generate usbconf.c and usbconf.h.  Compile these with 
   the other PORUS files.

3. Choose a port. If no port is available for your architecture, one will
   have to be written.
   
   (At this time, only one port is available. It runs on the TMS320VC5509A and
   TMS320VC5507 DSPs using the on-board USB hardware.)

4. Copy the port source files to your project.

5. Copy the core source files in src/ to your project.

About
-----

Written by Michael Ashton
(c) 2004-2006 TI Inc.

From WORDS by William Whitaker:

Word mod o/u         
An internal 'o' might be rendered by 'u'
pur.us               ADJ    1 1 NOM S M POS             
purus, pura -um, purior -or -us, purissimus -a -um  ADJ  
pure, clean, unsoiled; free from defilement/taboo/stain; blameless,
innocent; chaste, unpolluted by sex; plain/unadulterated; genuine; absolute;
refined; clear, limpid, free of mist/cloud; ringing (voice); open (land);
net; simple;
